#include <stdio.h>

#define MAX 10

typedef struct {
    int id, arrival_time, burst_time, remaining_time;
} process;

process p[MAX];
int n, q;
int flag[MAX];
int complete = 0;
int total_waiting_time = 0;
int total_turnaround_time = 0;

void calculate_avg_times() {
    float average_waiting_time = (float)total_waiting_time / n;
    float average_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage waiting time: %f", average_waiting_time);
    printf("\nAverage turnaround time: %f", average_turnaround_time);
}

void calculate_times() {
    int time = 0;
    int counter = 0;

    while (complete != n) {
        if (p[counter].remaining_time > 0 && p[counter].arrival_time <= time) {
            int time_slice = (q < p[counter].remaining_time) ? q : p[counter].remaining_time;
            total_waiting_time += time - p[counter].arrival_time;
            total_turnaround_time += time - p[counter].arrival_time + time_slice;
            time += time_slice;
            p[counter].remaining_time -= time_slice;

            if (p[counter].remaining_time == 0) {
                complete++;
                flag[counter] = 1;
            }
        }

        else if (p[counter].remaining_time == 0) {
            time++;
            counter++;
            if (counter == n)
                counter = 0;
        }

        else {
            if (counter == n - 1)
                counter = 0;
            else if (p[counter + 1].arrival_time <= time && flag[counter + 1] != 1)
                counter++;
            else
                time++;
        }
    }
}

void input_processes() {
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter time quantum: ");
    scanf("%d", &q);

    printf("\nEnter process details:\n");

    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d%d%d", &p[i].id, &p[i].arrival_time, &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
        flag[i] = 0;
    }
}

int main() {
    input_processes();
    calculate_times();
    calculate_avg_times();

    return 0;
}
